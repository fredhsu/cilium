// Code generated by go-swagger; DO NOT EDIT.

package server

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"github.com/cilium/cilium/api/v1/server/restapi"
	"github.com/cilium/cilium/api/v1/server/restapi/daemon"
	"github.com/cilium/cilium/api/v1/server/restapi/endpoint"
	"github.com/cilium/cilium/api/v1/server/restapi/ipam"
	"github.com/cilium/cilium/api/v1/server/restapi/policy"
	"github.com/cilium/cilium/api/v1/server/restapi/service"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../api/v1 --name  --spec ../api/v1/openapi.yaml --api-package restapi --server-package server --default-scheme unix

func configureFlags(api *restapi.CiliumAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *restapi.CiliumAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.EndpointDeleteEndpointIDHandler = endpoint.DeleteEndpointIDHandlerFunc(func(params endpoint.DeleteEndpointIDParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.DeleteEndpointID has not yet been implemented")
	})
	api.IPAMDeleteIPAMIPHandler = ipam.DeleteIPAMIPHandlerFunc(func(params ipam.DeleteIPAMIPParams) middleware.Responder {
		return middleware.NotImplemented("operation ipam.DeleteIPAMIP has not yet been implemented")
	})
	api.PolicyDeletePolicyHandler = policy.DeletePolicyHandlerFunc(func(params policy.DeletePolicyParams) middleware.Responder {
		return middleware.NotImplemented("operation policy.DeletePolicy has not yet been implemented")
	})
	api.ServiceDeleteServiceIDHandler = service.DeleteServiceIDHandlerFunc(func(params service.DeleteServiceIDParams) middleware.Responder {
		return middleware.NotImplemented("operation service.DeleteServiceID has not yet been implemented")
	})
	api.DaemonGetConfigHandler = daemon.GetConfigHandlerFunc(func(params daemon.GetConfigParams) middleware.Responder {
		return middleware.NotImplemented("operation daemon.GetConfig has not yet been implemented")
	})
	api.EndpointGetEndpointHandler = endpoint.GetEndpointHandlerFunc(func(params endpoint.GetEndpointParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.GetEndpoint has not yet been implemented")
	})
	api.EndpointGetEndpointIDHandler = endpoint.GetEndpointIDHandlerFunc(func(params endpoint.GetEndpointIDParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.GetEndpointID has not yet been implemented")
	})
	api.EndpointGetEndpointIDConfigHandler = endpoint.GetEndpointIDConfigHandlerFunc(func(params endpoint.GetEndpointIDConfigParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.GetEndpointIDConfig has not yet been implemented")
	})
	api.EndpointGetEndpointIDLabelsHandler = endpoint.GetEndpointIDLabelsHandlerFunc(func(params endpoint.GetEndpointIDLabelsParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.GetEndpointIDLabels has not yet been implemented")
	})
	api.DaemonGetHealthzHandler = daemon.GetHealthzHandlerFunc(func(params daemon.GetHealthzParams) middleware.Responder {
		return middleware.NotImplemented("operation daemon.GetHealthz has not yet been implemented")
	})
	api.PolicyGetIdentityHandler = policy.GetIdentityHandlerFunc(func(params policy.GetIdentityParams) middleware.Responder {
		return middleware.NotImplemented("operation policy.GetIdentity has not yet been implemented")
	})
	api.PolicyGetIdentityIDHandler = policy.GetIdentityIDHandlerFunc(func(params policy.GetIdentityIDParams) middleware.Responder {
		return middleware.NotImplemented("operation policy.GetIdentityID has not yet been implemented")
	})
	api.PolicyGetPolicyHandler = policy.GetPolicyHandlerFunc(func(params policy.GetPolicyParams) middleware.Responder {
		return middleware.NotImplemented("operation policy.GetPolicy has not yet been implemented")
	})
	api.PolicyGetPolicyResolveHandler = policy.GetPolicyResolveHandlerFunc(func(params policy.GetPolicyResolveParams) middleware.Responder {
		return middleware.NotImplemented("operation policy.GetPolicyResolve has not yet been implemented")
	})
	api.ServiceGetServiceHandler = service.GetServiceHandlerFunc(func(params service.GetServiceParams) middleware.Responder {
		return middleware.NotImplemented("operation service.GetService has not yet been implemented")
	})
	api.ServiceGetServiceIDHandler = service.GetServiceIDHandlerFunc(func(params service.GetServiceIDParams) middleware.Responder {
		return middleware.NotImplemented("operation service.GetServiceID has not yet been implemented")
	})
	api.DaemonPatchConfigHandler = daemon.PatchConfigHandlerFunc(func(params daemon.PatchConfigParams) middleware.Responder {
		return middleware.NotImplemented("operation daemon.PatchConfig has not yet been implemented")
	})
	api.EndpointPatchEndpointIDHandler = endpoint.PatchEndpointIDHandlerFunc(func(params endpoint.PatchEndpointIDParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.PatchEndpointID has not yet been implemented")
	})
	api.EndpointPatchEndpointIDConfigHandler = endpoint.PatchEndpointIDConfigHandlerFunc(func(params endpoint.PatchEndpointIDConfigParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.PatchEndpointIDConfig has not yet been implemented")
	})
	api.IPAMPostIPAMHandler = ipam.PostIPAMHandlerFunc(func(params ipam.PostIPAMParams) middleware.Responder {
		return middleware.NotImplemented("operation ipam.PostIPAM has not yet been implemented")
	})
	api.IPAMPostIPAMIPHandler = ipam.PostIPAMIPHandlerFunc(func(params ipam.PostIPAMIPParams) middleware.Responder {
		return middleware.NotImplemented("operation ipam.PostIPAMIP has not yet been implemented")
	})
	api.EndpointPutEndpointIDHandler = endpoint.PutEndpointIDHandlerFunc(func(params endpoint.PutEndpointIDParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.PutEndpointID has not yet been implemented")
	})
	api.EndpointPutEndpointIDLabelsHandler = endpoint.PutEndpointIDLabelsHandlerFunc(func(params endpoint.PutEndpointIDLabelsParams) middleware.Responder {
		return middleware.NotImplemented("operation endpoint.PutEndpointIDLabels has not yet been implemented")
	})
	api.PolicyPutPolicyHandler = policy.PutPolicyHandlerFunc(func(params policy.PutPolicyParams) middleware.Responder {
		return middleware.NotImplemented("operation policy.PutPolicy has not yet been implemented")
	})
	api.ServicePutServiceIDHandler = service.PutServiceIDHandlerFunc(func(params service.PutServiceIDParams) middleware.Responder {
		return middleware.NotImplemented("operation service.PutServiceID has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
